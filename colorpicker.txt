<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pixel Art Maker</title>
    <style>
      html{
        background: 
          radial-gradient(
            circle at top left,
            rgba(0, 47, 255, 0.5), 
            transparent 
          ),
          radial-gradient(
            circle at top right,
            rgba(132, 0, 255, 0.5), 
            transparent 
          ),
          radial-gradient(
            at bottom left,
            rgba(255, 187, 0, 0.609), 
            transparent 
          ),
          radial-gradient(
            at bottom right,
            rgba(250, 0, 125, 0.5), 
            transparent 
          );
        width: 100vw;
        height: 100vh;
      }
      body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      h2 {
        font-family: "Gill Sans";
        font-size: 1.2em;
        font-weight: 400;
        color: rgb(153, 153, 153);
        margin: 0;
      }
      input{
        background: black;
        color: white;
      }
      .container {
        display: flex;
        flex-direction: column;
        padding: 1em;
        border-radius: .9em;
        background-color: rgb(229, 229, 229);
      }
      .row {
        display: flex;
      }
      .pixel {
        width: 1em;
        height: 1em;
        border: .01em solid rgb(229, 229, 229);
        background-color: white;
      }
      .pixel:hover{
        cursor: url("./cursor.cur") 1 100, auto;
      }
      .palette {
        display: flex;
        flex-wrap: wrap;
        background-color: rgb(229, 229, 229);
        align-items: center;
      }
      .colors {
        width: 1.6em;
        height: 1.6em;
        border: .1em solid rgb(187, 187, 187);
        border-radius: 50%;
        display: flex;
        margin: .2em;
        cursor: pointer;
      }
      #headerBar{
        border: inset 2px goldenrod;
        background: radial-gradient(darkblue,blue);
        color: white;
        width:50vw;
        margin: .5em 0;
        display:flex;
        align-items: center;
        justify-content: space-between;
      }
    </style>
    <script defer>
'use strict'; // https://www.w3schools.com/js/js_strict.asp
document.addEventListener("DOMContentLoaded", (e) => {
​
  //initializing variables 
  let generatorButton = document.getElementById("generatorButton");
  const container = document.createElement("div");
  container.className = "container";
  let mouseDown = false;
  var brushColor = "";
​
  // implementing logic to allow mouse behaviors
  document.body.addEventListener("mouseup", () => (mouseDown = false));
  document.body.addEventListener("mouseenter", () => (mouseDown = false));
  
​
  // generator button takes input and begins creating board
  generatorButton.addEventListener("click", (e) => {
​
    //width & height are grabbed from user input
    let width = parseInt(document.getElementById("width").value, 10);
    let height = parseInt(document.getElementById("height").value, 10);
    
    //parent container is styled depending on user input.
    //you can think of this as more of the border than the actual width of the canvas
    container.style.width = `${width * 1}em`;
​
    //canvas generation starts as we create our element and class name
    const canvas = document.createElement("div");
    canvas.className = "canvas";
    const pixels = [];
​
    //error-checking paradigm where we ensure that our variable is true
    //only when we are holding the mouse down. 
    canvas.addEventListener("mousedown", () => (mouseDown = true));
​
    //for loop to create the rows which will then house the columns
    //for (iterator declaration; condition that must be true to continue looping; what to do after each loop)
    for (let y = 0; y < height; y++) {
      const pxRow = [];
      const row = document.createElement("div");
      row.className = "row";
​
      //nested loop because for each row we also want multiple columns
      //we start using the height to create the first column and then create the rows with that first column
      for (let x = 0; x < width; x++) {
​
        //actual individual pixels
        const pixel = document.createElement("div");
        pixel.className = "pixel";
​
        //event listeners that must be added when creating the element or else this approach won't work
        pixel.addEventListener("click",() => (pixel.style.backgroundColor = brushColor));
        pixel.addEventListener("mouseover", () => {if (!mouseDown) return; pixel.style.backgroundColor = brushColor;});
        
        //creating elements and appending them are basically how you "create elements from scratch" using JavaScript
        row.appendChild(pixel);
      }
      //once we append individual pixels to our rows, we want to append the rows to the canvas
      canvas.appendChild(row);
    }
    //append the canvas to the container
    container.appendChild(canvas);
​
    // we can use hex color codes or words, but this will generate the bottom palette to pick a color
    const hexColorCodes = ["#b23232","#ff4848","#ff6c6c","#e59b40","#ffad48","#ffc57e","#e5de40","#fff748","#fffa91","#39cc4b","#48ff5e","#91ff9e","#3248b2","#4867ff","#91a3ff","#6432b2","#8f48ff","#bb91ff","#7c2b99","#cf48ff","#e291ff","#000000","#323232","#666666","#999999","#cccccc","#ffffff","#3a2119","#512e23","#754233","#90675b","#ac8d84",];
    const palette = document.createElement("div");
    palette.className = "palette";
​
    //a for/of loop is very similar to a standard for/in loop
    //for all intents and purposes this will simply iterate over every item in an "iterable" data type 
    //strings, arrays, objects, HTMLCollections are iterables.
    //the biggest difference is 'color' is a reference to the iteration index, you don't need bracket notation 
    //so instead of hexColorCodes[color] you would simply put color
    for (let color of hexColorCodes) {
​
      //creating the elements for the colors to choose
      const colors = document.createElement("div");
      colors.className = "colors";
​
      //the div will be created with a background color of the current index's color
      colors.style.backgroundColor = color;
​
      //this event listener changes the brush color when clicked
      colors.addEventListener("click", () => {
        brushColor = color;
        title.style.backgroundColor = color;
      });
      palette.appendChild(colors);
    }
​
    //actual color-input that can choose a wide variety of colors
    const colorPicker = document.createElement("input");
    colorPicker.type = "color";
    colorPicker.id = "colorPicker"
    //this function is used to change the brush color using the input element.
    function changeColor(){brushColor = colorPicker.value}
    colorPicker.oninput = changeColor;
    palette.appendChild(colorPicker);
​
    //final touches in displaying the active color to the user
    const title = document.createElement("h2");
    title.innerText = " CURRENT COLOR ";
    title.style.border="inset 1px silver";
    title.style.margin="0 2em";
​
    palette.appendChild(title);
    container.appendChild(palette);
​
​
    //finally appending the container we just created to the document.
    document.body.appendChild(container);
​
    var headerBar = document.getElementById("headerBar");
    headerBar.parentElement.removeChild(headerBar);
    console.log(headerBar)
  });
});
    </script>
  </head>
​
​
  <body>
    <div id="headerBar">
      Width:
      <input type="number" id="width" />
      Height:
      <input type="number" id="height" />
      <button id="generatorButton">Generate!</button>
    </div>
  </body>
</html>
​